---
description: 
globs: 
alwaysApply: false
---
{
    "context": "project_setup_orchestrator",
    "description": "Главный пайплайн для полной инициализации проекта из мастер-документа project_docs/ai_executable_plan.json. Запускается одной командой, использует системную утилиту для парсинга и генерации артефактов.",
   
    "trigger_command": "подготовь проект по документу ai_executable_plan.json",
    "input_file": "project_docs/ai_executable_plan.json",
   
    "setupPipeline": [
        {
            "name": "Этап 0: Проверка окружения и доступов",
            "description": "Проверка наличия необходимых инструментов, доступов и создание базовой структуры проекта.",
            "tasks": [
                "Проверить наличие git. Если не установлен, сообщить пользователю.",
                "Проверить наличие файла .env в корне проекта. Если его нет, создать пустой файл.",
                "Проверить, подключен ли в Cursor IDE MCP сервер для CONTEXT7 в ~/.cursor/mcp.json (или %USERPROFILE%\.cursor\mcp.json на Windows), если нет - проверить настройки в интерфейсе Cursor, если нет - протестировать работу MCP сервера, если все-таки не настроено - установить из https://github.com/upstash/context7"
            ]
        },
        {
            "name": "Этап 1: Инициализация структуры проекта",
            "description": "Создание базовых директорий и инициализация системы контроля версий.",
            "tasks": [
                "Создать базовые директории, если их нет: project_docs/, tasks/dev/, tasks/deploy/, .cursor/scripts/.",
                "Инициализировать git репозиторий (git init), если он не существует."
            ]
        },
        {
            "name": "Этап 2: Подготовка и запуск системной утилиты",
            "description": "Выполнение скомпилированной утилиты для автоматической генерации архитектуры, планов и файлов задач из мастер-документа.",
            "tasks": [
                {
                    "step": "2.1. Проверить/создать утилиту",
                    "action": "Проверить наличие исполняемого файла по пути .cursor/scripts/parse_master_plan*. Если его нет, сообщить об ошибке, так как это критически важный компонент системы."
                },
                {
                    "step": "2.2. Запустить утилиту",
                    "action": "Запустить исполняемый файл из терминала для парсинга мастер-плана. (Для Windows команда может использовать .exe)",
                    "command": "./.cursor/scripts/parse_master_plan --input ./project_docs/ai_executable_plan.json --output ./ --force",
                    "expected_result": "В директории project_docs/ созданы файлы SAD.md, dev_plan.md, deploy_plan.md. В директориях tasks/dev/ и tasks/deploy/ созданы JSON-файлы задач. Утилита должна завершиться с кодом 0."
                }
            ]
        },
        {
            "name": "Этап 3: Финальная валидация и коммит",
            "description": "Проверка результатов работы утилиты и фиксация изменений.",
            "tasks": [
            "Проверить наличие и непустое содержимое сгенерированных документов (SAD.md, dev_plan.md, deploy_plan.md).",
            "Проверить, что в директориях tasks/ созданы JSON-файлы.",
            "Добавить все сгенерированные файлы в git (git add .).",
            "Сделать первоначальный коммит с сообщением 'chore: initial project structure generated from plan'."
            ]
        },
        {
            "name": "Этап 4: Отчет пользователю",
            "description": "Информирование пользователя о завершении подготовки проекта.",
            "action": "Сообщить пользователю: 'Проект успешно инициализирован на основе project_docs/ai_executable_plan.json. Созданы архитектура, планы и задачи. Система готова к выполнению задач разработки и деплоя.'"
        }
    ]
}