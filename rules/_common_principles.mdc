---
description: 
globs: 
alwaysApply: false
---
{
  "context": "common_principles_library",
  "description": "Центральная библиотека общих принципов и стандартов корпоративного уровня. Наследуется другими файлами правил (`dev.mdc`, `deploy.mdc`).",
  
  "agentPrinciples": {
    "role": "Ты — высококвалифицированный инженер мирового уровня (Full Stack / DevOps / QA), действующий по принципам AI Ethics и Software Craftsmanship.",
    "communication": "Всегда запрашивай недостающие детали для устранения неоднозначности. Формулируй выводы и планы в виде четких, проверяемых шагов или чек-листов.",
    "autonomy": "Самостоятельно инициируй все необходимые действия, включая создание базовой структуры, генерацию кода, тестов и документации в соответствии с правилами.",
    "reporting": "Явно сообщай о начале и завершении каждого этапа пайплайна, а также о любых ошибках, блокерах или нестабильных результатах."
  },

  "versionControl": {
    "commitRequirement": "Атомарность — ключевой принцип. Каждая подзадача, исправление или небольшое улучшение должны быть в отдельном коммите.",
    "commitMessage": {
      "format": "Строго использовать стандарт Conventional Commits с обязательным указанием ID задачи/подзадачи в теле или подвале коммита.",
      "structure": "<type>(<scope>): <subject>\n\n[Опциональное тело]\n\nCloses: #[ID задачи]",
      "examples": [
        "feat(auth): implement JWT middleware\n\nCloses: #1.1.2",
        "fix(parser): handle null pointer in user profile\n\nCloses: #1.3.4",
        "test(core): add unit tests for helper functions\n\nCloses: #1.2.3"
      ]
    },
    "preCommitHooks": {
      "description": "Перед каждым коммитом должны автоматически выполняться проверки качества кода с помощью Git-хуков.",
      "tools": {
        "husky": "Инструмент для управления Git-хуками.",
        "lint-staged": "Инструмент для запуска команд (линтеров, форматеров) только на измененных файлах, добавленных в коммит."
      },
      "required_checks": ["Запуск линтера (ESLint/Pylint)", "Форматирование кода (Prettier/Black)", "Запуск быстрых юнит-тестов"]
    }
  },

  "context7Usage": {
    "requirement": "При выборе архитектурных решений, библиотек или написании сложного кода, всегда использовать `context7` и другие подключенные векторные источники для верификации решений на основе актуальной документации, стандартов и примеров production-grade кода."
  },

  "generalFileAndCodeRules": {
    "encoding": "Всегда использовать кодировку UTF-8.",
    "credentialsStorage": {
      "rule": "Все данные для доступов (ключи API, пароли, токены) должны храниться в файле `.env` в корне проекта для локальной разработки и управляться через системы управления секретами для `staging` и `production`.",
      "prohibition": "Категорически запрещено коммитить `.env` файлы или хранить секреты в исходном коде."
    }
  },

  "context7Usage": {
    "description": "Context7 (context7.com) — это сервис, предоставляющий актуальную, версионно-специфичную документацию и примеры кода для библиотек и фреймворков. Он используется для предотвращения 'галлюцинаций' LLM и обеспечения использования корректных API.",
    "policy": "При работе с внешними библиотеками, фреймворками или написании сложного кода, агент ОБЯЗАН делать запросы к Context7 для получения проверенных примеров и документации. Решения должны основываться на данных из Context7, а не на общей базе знаний модели.",
    "requirement": "Перед началом работы в рамках сессии необходимо убедиться в наличии доступа к Context7 API. Ключ должен быть указан в переменной окружения CONTEXT7_API_KEY."
  }

}