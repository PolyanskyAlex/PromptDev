---
description: 
globs: 
alwaysApply: false
---
{
  "context": "development_rules",
  "description": "Детальные правила для высококачественной разработки программного обеспечения, соответствующие стандартам ведущих технологических компаний.",
  "inherits": ".cursor/rules/_common_principles.mdc",

  "solidPrinciples": {
    "srp": "Один модуль — одна четко определенная ответственность.",
    "ocp": "Расширяй поведение через наследование или композицию, а не модификацию существующего кода.",
    "lsp": "Производные типы должны быть полностью взаимозаменяемы с базовыми типами.",
    "isp": "Создавай небольшие, сфокусированные интерфейсы вместо одного большого и универсального.",
    "dip": "Завись от абстракций (интерфейсов), а не от конкретных реализаций."
  },

  "additionalPrinciples": {
    "dry": "Don't Repeat Yourself. Выноси повторяющуюся логику в переиспользуемые функции или классы.",
    "kiss": "Keep It Simple, Stupid. Простое и понятное решение всегда предпочтительнее сложного.",
    "yagni": "You Aren't Gonna Need It. Не реализовывай функциональность, которая не требуется прямо сейчас.",
    "soc": "Separation of Concerns. Четко разделяй слои приложения: представление (UI), бизнес-логика (services), доступ к данным (repositories)."
  },

  "codeQuality": {
    "cleanCode": "Пиши код так, как будто его будет поддерживать самый придирчивый и опытный разработчик. Имена должны быть говорящими, функции — короткими.",
    "tdd": "Придерживаться цикла Test-Driven Development: Red (написать падающий тест) -> Green (написать минимальный код для прохождения теста) -> Refactor (улучшить код).",
    "testCoverage": "Целевое покрытие кода тестами: >90% для критически важной бизнес-логики, >80% для остального кода.",
    "errorHandling": "Использовать структурированное логирование (JSON). Каждое сообщение об ошибке должно содержать контекст (например, `request_id`, `user_id`) для легкой трассировки.",
    "comments": "Комментируй *ПОЧЕМУ* код написан именно так (сложные решения, компромиссы), а не *ЧТО* он делает. Используй docstrings для API и публичных методов."
  },

  "architecturalPatterns": {
    "sadCompliance": "Строго следовать архитектуре, описанной в `project_docs/SAD.md`. Любое отклонение должно быть обосновано и зафиксировано как архитектурное решение.",
    "modularity": "Проектировать компоненты с низким зацеплением (low coupling) и высокой связностью (high cohesion)."
  },

  "security": {
    "owaspTop10": "Применять практики для защиты от уязвимостей из списка OWASP Top 10.",
    "inputValidation": "Все данные, приходящие извне (API запросы, файлы), являются недоверенными и должны проходить строгую валидацию и санитайзинг.",
    "secretsManagement": "Использовать специализированные инструменты для управления секретами (например, HashiCorp Vault, AWS Secrets Manager, Doppler) или переменные окружения. Запрещено коммитить `.env` файлы.",
    "dependencyScanning": "Регулярно проводить аудит зависимостей с помощью `npm audit`, `pip-audit` или `snyk` для выявления уязвимостей."
  }
}